<apex:page >
<script type="text/javascript" src="https://www.google.com/jsapi"></script>
<script type="text/javascript" src="/js/functions.js"></script>
	<script src="/soap/ajax/9.0/connection.js"></script>
	<script src="/soap/ajax/9.0/apex.js"></script>
	<script type="text/javascript">
    var __sfdcSessionId = '{!GETSESSIONID()}';
    </script>
    <script src="../../soap/ajax/21.0/connection.js"
          type="text/javascript">
</script>
<script type="text/javascript">
	// this function will format date
	var dateFormat = function () {
		var	token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\1?|[LloSZ]|"[^"]*"|'[^']*'/g,
			timezone = /\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g,
			timezoneClip = /[^-+\dA-Z]/g,
			pad = function (val, len) {
				val = String(val);
				len = len || 2;
				while (val.length < len) val = "0" + val;
				return val;
			};
	
		// Regexes and supporting functions are cached through closure
		return function (date, mask, utc) {
			var dF = dateFormat;
	
			// You can't provide utc if you skip other args (use the "UTC:" mask prefix)
			if (arguments.length == 1 && Object.prototype.toString.call(date) == "[object String]" && !/\d/.test(date)) {
				mask = date;
				date = undefined;
			}
	
			// Passing date through Date applies Date.parse, if necessary
			date = date ? new Date(date) : new Date;
			if (isNaN(date)) throw SyntaxError("invalid date");
	
			mask = String(dF.masks[mask] || mask || dF.masks["default"]);
	
			// Allow setting the utc argument via the mask
			if (mask.slice(0, 4) == "UTC:") {
				mask = mask.slice(4);
				utc = true;
			}
	
			var	_ = utc ? "getUTC" : "get",
				d = date[_ + "Date"](),
				D = date[_ + "Day"](),
				m = date[_ + "Month"](),
				y = date[_ + "FullYear"](),
				H = date[_ + "Hours"](),
				M = date[_ + "Minutes"](),
				s = date[_ + "Seconds"](),
				L = date[_ + "Milliseconds"](),
				o = utc ? 0 : date.getTimezoneOffset(),
				flags = {
					d:    d,
					dd:   pad(d),
					ddd:  dF.i18n.dayNames[D],
					dddd: dF.i18n.dayNames[D + 7],
					m:    m + 1,
					mm:   pad(m + 1),
					mmm:  dF.i18n.monthNames[m],
					mmmm: dF.i18n.monthNames[m + 12],
					yy:   String(y).slice(2),
					yyyy: y,
					h:    H % 12 || 12,
					hh:   pad(H % 12 || 12),
					H:    H,
					HH:   pad(H),
					M:    M,
					MM:   pad(M),
					s:    s,
					ss:   pad(s),
					l:    pad(L, 3),
					L:    pad(L > 99 ? Math.round(L / 10) : L),
					t:    H < 12 ? "a"  : "p",
					tt:   H < 12 ? "am" : "pm",
					T:    H < 12 ? "A"  : "P",
					TT:   H < 12 ? "AM" : "PM",
					Z:    utc ? "UTC" : (String(date).match(timezone) || [""]).pop().replace(timezoneClip, ""),
					o:    (o > 0 ? "-" : "+") + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),
					S:    ["th", "st", "nd", "rd"][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10]
				};
	
			return mask.replace(token, function ($0) {
				return $0 in flags ? flags[$0] : $0.slice(1, $0.length - 1);
			});
		};
	}();
	
	// Some common format strings
	dateFormat.masks = {
		"default":      "ddd mmm dd yyyy HH:MM:ss",
		shortDate:      "m/d/yy",
		mediumDate:     "mmm d, yyyy",
		longDate:       "mmmm d, yyyy",
		fullDate:       "dddd, mmmm d, yyyy",
		shortTime:      "h:MM TT",
		mediumTime:     "h:MM:ss TT",
		longTime:       "h:MM:ss TT Z",
		isoDate:        "yyyy-mm-dd",
		isoTime:        "HH:MM:ss",
		isoDateTime:    "yyyy-mm-dd'T'HH:MM:ss",
		isoUtcDateTime: "UTC:yyyy-mm-dd'T'HH:MM:ss'Z'"
	};

	// Internationalization strings
	dateFormat.i18n = {
		dayNames: [
			"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat",
			"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"
		],
		monthNames: [
			"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec",
			"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"
		]
	};
	
	// For convenience...
	Date.prototype.format = function (mask, utc) {
		return dateFormat(this, mask, utc);
	};

	// end of date formating function

	// Function returns month by month name
		function getMonthName(val)
		{
			if(val==0)
				return 'January';
			if(val==1)
				return 'Feberuary';
			if(val==2)
				return 'March';
			if(val==3)
				return 'April';
			if(val==4)
				return 'May';
			if(val==5)
				return 'Jun';
			if(val==6)
				return 'July';
			if(val==7)
				return 'August';
			if(val==8)
				return 'September';
			if(val==9)
				return 'October';
			if(val==10)
				return 'November';
			if(val==11)
				return 'December';		
		}
	// end of function
	
	



	google.load("visualization", "1", {packages:["corechart"]});
    google.setOnLoadCallback(drawChart);
      function drawChart() {
		// Karim Code
		var now = new Date();
		var year = now.getFullYear();
		var month = now.getMonth();
		var day = 1;
		
		var firstSum = 0.00 ;
		var firstName = getMonthName(month) ;
		var secSum = 0.00 ;
		var secName = getMonthName((month-1)) ;
		var thrdSum = 0.00 ;
		var thrdName = getMonthName((month-2)) ;
		
		var thisMonth = new Date(year, month, day);
		
		var prevMonthsd = new Date(year, (month-1), 1);
		var prevMonthed = new Date(year, (month-1), 30);
		
		var thrdMonthsd = new Date(year, (month-2), 1);
		var thrdMonthed = new Date(year, (month-2), 3);
		
		thisMonthSome = sforce.connection.query("select sum(Net__c) from Ledger__c where Type__c = 'SI' and Trans_Date__c >="+thisMonth.format("yyyy-mm-dd")+"");
		
		prevMonthSome = sforce.connection.query("select sum(Net__c) from Ledger__c where Type__c = 'SI' and Trans_Date__c >="+prevMonthsd.format("yyyy-mm-dd")+" and Trans_Date__c <="+prevMonthed.format("yyyy-mm-dd"));
		
		thrdMonthSome = sforce.connection.query("select sum(Net__c) from Ledger__c where Type__c = 'SI' and Trans_Date__c >="+thrdMonthsd.format("yyyy-mm-dd")+" and Trans_Date__c <="+thrdMonthed.format("yyyy-mm-dd"));
		
    	//alert('this month sum: ' + thisMonthSome );
    	//alert('prev month sum: ' + prevMonthSome );
    	//alert('thrird month sum: ' + thrdMonthSome );
    	
    	thisMonthSome = thisMonthSome.getArray("records");
    	prevMonthSome = prevMonthSome.getArray("records");
    	thrdMonthSome = thrdMonthSome.getArray("records");
    	
    	//alert('this month sum: ' + thisMonthSome[0].expr0 );
    	//alert('prev month sum: ' + prevMonthSome[0].expr0 );
    	//alert('thrird month sum: ' + thrdMonthSome[0].expr0 );
    	
    	if(thisMonthSome[0].expr0 !=null || thisMonthSome[0].expr0 == '')
    		firstSum = thisMonthSome[0].expr0 ;
    	else
    		firstSum = 0.0;
    		
    	if(prevMonthSome[0].expr0 !=null || prevMonthSome[0].expr0 == '')
    		secSum = prevMonthSome[0].expr0 ;
    	else
    		secSum = 0.0;
    		
    	if(thrdMonthSome[0].expr0 !=null || thrdMonthSome[0].expr0 == '')
    		thrdSum = thrdMonthSome[0].expr0 ;
    	else
    		thrdSum = 0.0;	
    	
    	//alert('this month sum fro month : ' + firstName + ' '+ firstSum );
    	//alert('prev month sum: ' + secName + ' '+   secSum );
    	//alert('thrird month sum: '  + thrdName + ' '+  thrdSum ); 
    	 
    	      
      
        var data = new google.visualization.DataTable();
        data.addColumn('string', 'Year');
        data.addColumn('number', 'Sales');
        data.addRows(4);
        
        data.setValue(0, 0, thrdName);
        data.setValue(0, 1, Number(thrdSum));
        
        data.setValue(1, 0, secName);
        data.setValue(1, 1, Number(secSum));
        
        data.setValue(2, 0, firstName);
        data.setValue(2, 1, Number(firstSum));
        
        var chart = new google.visualization.LineChart(document.getElementById('chart_div'));
        chart.draw(data, 
        			{
        				width: 400, height: 300, title: 'Sales report for last 3 months',
        				vAxis: {title: 'Net Sales', titleTextStyle: {color: 'red'}},
        				hAxis: {title: 'Month', titleTextStyle: {color: 'Blue'}}
       				});
      }
</script>
    <div id="chart_div"></div>
</apex:page>